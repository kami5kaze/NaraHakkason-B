import os
from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError, LineBotApiError
from linebot.models import (RichMenu, RichMenuArea, RichMenuBounds, RichMenuSize)
from linebot.models import TextSendMessage
from linebot.models import TemplateSendMessage, ButtonsTemplate, MessageAction
from linebot.models.actions import PostbackAction
from linebot.models import PostbackEvent
from linebot.models import MessageEvent
from sendNotification import sendNotify
import schedule
import time
import config
import telCall

townList = [['鳥見町', '高畑町', '須川町'],
            ['青山', '青垣台', '阪原町'],
            ['ooo', 'xxx', 'zzz']]
townListLen = len(townList)
townSelectNum = 0
townKey = ''

def jamp_map_page():
    return 'https://naracity.geocloud.jp/mp/26'

def make_button_template():
    message_template = TemplateSendMessage(      
        alt_text='お住まいの地区を選択してください',
        template=ButtonsTemplate(                
            text='お住まいの地区を選択してください',
            title='住所選択',
            actions=[                            
                MessageAction(label=townList[townSelectNum % townListLen][0], text=townList[townSelectNum % townListLen][0]),
                MessageAction(label=townList[townSelectNum % townListLen][1], text=townList[townSelectNum % townListLen][1]),
                MessageAction(label=townList[townSelectNum % townListLen][2], text=townList[townSelectNum % townListLen][2]),
                MessageAction(label='上記以外', text='上記以外'),
            ]
        )
    )
    return message_template

app = Flask(__name__)

LineAccessToken = config.LINE_CHANNEL_ACCESS_TOKEN


line_bot_api = LineBotApi(LineAccessToken)
handler = WebhookHandler(config.LINE_CHANNEL_SECRET)

richMenuImagePath = '../../../../images/richmenu_1710784918598.jpg'

with open(richMenuImagePath, 'rb') as f:
    richMenuImageContent = f.read()

# sendNotify クラスのインスタンスを作成
notify_instance = sendNotify(townKey, line_bot_api)

richMenuCreate = RichMenu(
    size=RichMenuSize(width=2500, height=1686),
    selected=True,
    name='richmenu',
    chat_bar_text='メニュー',
    areas=[
        RichMenuArea(

            bounds=RichMenuBounds( x = 0,y = 0,width=833,height=843),
            action=PostbackAction(data='1',label='map'),
        ),
        RichMenuArea(
            bounds=RichMenuBounds( x = 834,y = 0,width=833,height=843),
            action=PostbackAction(data='2',label='memo')
        ),
        RichMenuArea(
            bounds=RichMenuBounds( x = 1668,y = 0,width=833,height=843),
            action=PostbackAction(data='3',label='address')
        ),
        RichMenuArea(
            bounds=RichMenuBounds(x=0,y=844,width=2500,height=843),
            action=PostbackAction(data='4',label='tel_button'),
        ),
    ]

)

@handler.add(PostbackEvent)
def handle_postback(event):
    data = event.postback.data
    print("Postback data:", data)
    if data == "1":
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=jamp_map_page()))
    elif data == "4":
        # 電話をかける
        # line_bot_api.reply_message(event.reply_token,telCall.tel_call_template(telListNum=0))
        print(data)
    elif data == "4":
        # 仮で住所登録を試す
        # ボタンテンプレートメッセージを送信

        line_bot_api.reply_message(event.reply_token,make_button_template())
    elif data == "2":
        print(data)


@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

richMenuId = line_bot_api.create_rich_menu(rich_menu=richMenuCreate)

@handler.add(MessageEvent)
def handle_message(event):
    global townKey
    global townSelectNum
    user_input = event.message.text
    if user_input == townList[townSelectNum % townListLen][0]:
        notify_instance.townKey = townList[townSelectNum % townListLen][0]
        replyMessage = townList[townSelectNum % townListLen][0]+'をお住まいの地区に登録しました'
    elif user_input == townList[townSelectNum % townListLen][1]:
        notify_instance.townKey = townList[townSelectNum % townListLen][1]
        replyMessage = townList[townSelectNum % townListLen][0]+'をお住まいの地区に登録しました'
    elif user_input == townList[townSelectNum % townListLen][2]:
        notify_instance.townKey = townList[townSelectNum % townListLen][2]
        replyMessage = townList[townSelectNum % townListLen][0]+'をお住まいの地区に登録しました'
    else:
        townSelectNum += 1
        line_bot_api.reply_message(event.reply_token, make_button_template())
    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=replyMessage))

try:
    line_bot_api.set_rich_menu_image(rich_menu_id=richMenuId, content_type='image/jpeg', content=richMenuImageContent)
    line_bot_api.set_default_rich_menu(richMenuId)
except LineBotApiError as e:
    print(e)

# 1分ごとに通知をチェックするジョブをスケジュールに追加
schedule.every(1).minutes.do(notify_instance.can_send_notification)

if __name__ == "__main__":
    port = int(os.getenv("port", 8000))
    app.run(host="0.0.0.0", port=port, debug=False)
